{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "worker_tabel2",
    "name" : "worker-tabel",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Table</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Worker ID</th>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Position</th>\n                    <th>Site</th>\n                    <th>On Site</th>\n                </tr>\n            </thead>\n            <tbody id=\"workerTableBody\">\n                <!-- Rows will be dynamically added here -->\n            </tbody>\n        </table>\n    </div>\n    <script>\n        // Function to fetch data from the API and populate the table\n        async function fetchWorkerList() {\n            try {\n                const response = await fetch('https://api.vrtwin.org/api/worker/list');\n                const data = await response.json();\n\n                // Populate table with data\n                const tableBody = document.getElementById('workerTableBody');\n                tableBody.innerHTML = ''; // Clear existing rows\n\n                data.forEach(worker => {\n                    const row = document.createElement('tr');\n\n                    // Add Worker ID\n                    const workerIDCell = document.createElement('td');\n                    workerIDCell.textContent = worker.workerID;\n                    row.appendChild(workerIDCell);\n\n                    // Add First Name\n                    const firstNameCell = document.createElement('td');\n                    firstNameCell.textContent = worker.firstName;\n                    row.appendChild(firstNameCell);\n\n                    // Add Last Name\n                    const lastNameCell = document.createElement('td');\n                    lastNameCell.textContent = worker.lastName;\n                    row.appendChild(lastNameCell);\n\n                    // Add Position\n                    const positionCell = document.createElement('td');\n                    positionCell.textContent = worker.position;\n                    row.appendChild(positionCell);\n\n                    // Add Site\n                    const siteCell = document.createElement('td');\n                    siteCell.textContent = worker.site;\n                    row.appendChild(siteCell);\n\n                    // Add On Site\n                    const onSiteCell = document.createElement('td');\n                    onSiteCell.textContent = worker.onSite ? 'Yes' : 'No';\n                    row.appendChild(onSiteCell);\n\n                    // Append row to the table body\n                    tableBody.appendChild(row);\n                });\n            } catch (error) {\n                console.error('Error fetching worker list:', error);\n            }\n        }\n\n        // Fetch data on page load\n        fetchWorkerList();\n    </script>\n</body>\n</html>\n",
      "templateCss" : "/* ریست اولیه استایل‌ها */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n/* جدول */\ntable {\n    width: 100%;\n    height: 100%;\n    border-collapse: collapse; /* حذف فاصله خطوط بین سلول‌ها */\n    background-color: #ffffff; /* سفید */\n    border: 2px solid #333; /* خطوط کلی جدول */\n    table-layout: fixed; /* عرض ستون‌ها یکنواخت می‌شود */\n}\n\nthead {\n    background-color: #007bff; /* رنگ آبی برای هدر جدول */\n    color: white;\n    border-bottom: 2px solid #333; /* خط برجسته زیر هدر */\n}\n\nthead th {\n    padding: 10px;\n    font-size: 14px;\n    text-transform: uppercase;\n    border-right: 2px solid #333; /* خطوط جداکننده بین ستون‌ها */\n    text-align: center;\n    overflow: hidden; /* جلوگیری از نمایش متن اضافی */\n    text-overflow: ellipsis; /* متن اضافی با سه نقطه نمایش داده شود */\n    white-space: nowrap; /* جلوگیری از چند خط شدن متن */\n}\n\ntbody tr {\n    border-bottom: 2px solid #333; /* خطوط برجسته بین ردیف‌ها */\n    height: auto; /* ارتفاع رسپانسیو */\n}\n\ntbody tr:nth-child(even) {\n    background-color: #ffffff; /* تمام ردیف‌ها سفید */\n}\n\ntbody tr:nth-child(odd) {\n    background-color: #ffffff; /* تمام ردیف‌ها سفید */\n}\n\ntbody tr:hover {\n    background-color: #e2e6ea; /* رنگ هنگام هاور (خاکستری روشن‌تر) */\n}\n\ntbody td {\n    padding: 8px;\n    font-size: 14px;\n    text-align: center;\n    color: #333; /* رنگ متن */\n    border-right: 2px solid #333; /* خطوط جداکننده بین ستون‌ها */\n    overflow: hidden; /* جلوگیری از نمایش متن اضافی */\n    text-overflow: ellipsis; /* متن اضافی با سه نقطه نمایش داده شود */\n    white-space: nowrap; /* جلوگیری از چند خط شدن متن */\n}\n\n/* تغییر رنگ ستون ویژگی‌ها */\ntbody td:nth-child(1) {\n    background-color: #ffebcc; /* زرد روشن برای ستون \"Worker ID\" */\n}\n\ntbody td:nth-child(2) {\n    background-color: #d4edda; /* سبز روشن برای ستون \"First Name\" */\n}\n\ntbody td:nth-child(3) {\n    background-color: #cce5ff; /* آبی روشن برای ستون \"Last Name\" */\n}\n\ntbody td:nth-child(4) {\n    background-color: #f8d7da; /* قرمز روشن برای ستون \"Position\" */\n}\n\ntbody td:nth-child(5) {\n    background-color: #fff3cd; /* کرمی روشن برای ستون \"Site\" */\n}\n\ntbody td:nth-child(6) {\n    background-color: #d1ecf1; /* آبی-سبز روشن برای ستون \"On Site\" */\n}\n\n/* رسپانسیو کردن جدول */\n.table-container {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    overflow: auto; /* اسکرول در صورت نیاز */\n}\n",
      "controllerScript" : "// Function to fetch data from the API and populate the table\nasync function fetchWorkerList() {\n    try {\n        const response = await fetch('https://api.vrtwin.org/api/worker/list');\n        const data = await response.json();\n\n        // Populate table with data\n        const tableBody = document.getElementById('workerTableBody');\n        tableBody.innerHTML = ''; // Clear existing rows\n\n        data.forEach(worker => {\n            const row = document.createElement('tr');\n\n            // Add Worker ID\n            const workerIDCell = document.createElement('td');\n            workerIDCell.textContent = worker.workerID;\n            row.appendChild(workerIDCell);\n\n            // Add First Name\n            const firstNameCell = document.createElement('td');\n            firstNameCell.textContent = worker.firstName;\n            row.appendChild(firstNameCell);\n\n            // Add Last Name\n            const lastNameCell = document.createElement('td');\n            lastNameCell.textContent = worker.lastName;\n            row.appendChild(lastNameCell);\n\n            // Add Position\n            const positionCell = document.createElement('td');\n            positionCell.textContent = worker.position;\n            row.appendChild(positionCell);\n\n            // Add Site\n            const siteCell = document.createElement('td');\n            siteCell.textContent = worker.site;\n            row.appendChild(siteCell);\n\n            // Add On Site\n            const onSiteCell = document.createElement('td');\n            onSiteCell.textContent = worker.onSite ? 'Yes' : 'No';\n            row.appendChild(onSiteCell);\n\n            // Append row to the table body\n            tableBody.appendChild(row);\n        });\n    } catch (error) {\n        console.error('Error fetching worker list:', error);\n    }\n}\n\n// Fetch data on page load\nfetchWorkerList();\n",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"worker-tabel\",\"dropShadow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "164a67d0-c754-11ef-9ac5-95d0babc9857"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}