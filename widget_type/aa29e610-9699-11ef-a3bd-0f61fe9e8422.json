{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "weather",
    "name" : "weather",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdn.jsdelivr.net/npm/chart.js"
      } ],
      "templateHtml" : "<div class=\"chart-container\">\n    <div class=\"chart-title\">Weather Forecast</div> <!-- Title of the chart -->\n    <canvas id=\"weatherChart\"></canvas>\n    <div id=\"prediction\"></div>\n    <div id=\"weather-condition\">\n        <img id=\"weather-icon\" alt=\"Weather Icon\" />\n        <span id=\"weather-description\"></span>\n    </div>\n</div>\n",
      "templateCss" : "/* Chart Container Style */\n.chart-container {\n    position: relative;\n    width: 100%;\n    height: 250px; /* Adjust height to fit ThingsBoard widget size */\n    max-width: 400px; /* Set maximum width to fit properly in widget area */\n    margin: auto;\n    padding: 10px;\n    background: #ffffff; /* White background for the chart container */\n    border-radius: 5px; /* Small rounded corners */\n}\n\n/* Canvas Chart Style */\n#weatherChart {\n    width: 100% !important; /* Set width to fit the widget */\n    height: auto !important; /* Adjust height proportionally */\n    border-radius: 0px; /* Remove rounded corners */\n    background: none; /* Remove background color */\n    box-shadow: none; /* Remove shadow */\n}\n\n/* Prediction Text Style */\n#prediction {\n    margin-top: 15px;\n    font-size: 1em; /* Adjust text size to be smaller */\n    color: #333; /* Dark color for readability */\n    text-align: center;\n    font-weight: normal; /* Normal text weight for consistency */\n}\n\n/* Weather Condition Style */\n#weather-condition {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 10px;\n}\n\n#weather-icon {\n    width: 24px; /* Adjust icon size to be smaller and more aligned with widget size */\n    height: 24px;\n    margin-right: 10px;\n}\n\n#weather-description {\n    font-size: 1em; /* Smaller font size for better alignment */\n    color: #333;\n}\n",
      "controllerScript" : "self.onInit = function() {\n    // Generate logical temperature data for demonstration\n    function generateLogicalData(numPoints) {\n        const data = [];\n        let baseTemp = Math.floor(Math.random() * 20) - 10; // Base temperature between -10 and 10°C\n        for (let i = 0; i < numPoints; i++) {\n            const variation = Math.floor(Math.random() * 5) - 2; // Variation between -2 and +2\n            baseTemp += variation;\n            if (baseTemp < -10) baseTemp = -10; // Ensure temperature stays within range\n            if (baseTemp > 40) baseTemp = 40; // Ensure temperature stays within range\n            data.push(baseTemp);\n        }\n        return data;\n    }\n\n    // Predict the next temperature using a simple linear regression approach\n    function predictNextTemperature(data) {\n        const n = data.length;\n        const x = Array.from({ length: n }, (_, i) => i);\n        const y = data;\n\n        const xSum = x.reduce((a, b) => a + b, 0);\n        const ySum = y.reduce((a, b) => a + b, 0);\n        const xySum = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n        const xSqSum = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n        const m = (n * xySum - xSum * ySum) / (n * xSqSum - xSum * xSum);\n        const b = (ySum - m * xSum) / n;\n\n        const nextIndex = n;\n        const nextTemperature = m * nextIndex + b;\n\n        if (nextTemperature < -10) return -10;\n        if (nextTemperature > 40) return 40;\n        return nextTemperature;\n    }\n\n    // Determine weather condition based on temperature\n    function getWeatherCondition(temp) {\n        if (temp <= 5) {\n            return { description: 'Snowy', icon: 'snowy.png' };\n        } else if (temp <= 15) {\n            return { description: 'Rainy', icon: 'rainy.png' };\n        } else if (temp <= 25) {\n            return { description: 'Cloudy', icon: 'cloudy.png' };\n        } else {\n            return { description: 'Sunny', icon: 'sunny.png' };\n        }\n    }\n\n    // Days of the week\n    const days = ['Today', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    // Generate logical data for all days\n    const data = generateLogicalData(days.length);\n\n    // Predict the next temperature for Sunday\n    const predictedTemperature = predictNextTemperature(data);\n    data.push(predictedTemperature);\n\n    // Get the canvas context\n    const chartContext = document.getElementById('weatherChart').getContext('2d');\n\n    // Create the chart with different colors for \"Today\"\n    const weatherChart = new Chart(chartContext, {\n        type: 'line',\n        data: {\n            labels: days,\n            datasets: [\n                {\n                    label: 'Temperature Forecast (Future Days) (°C)',\n                    data: data, // Data for all days\n                    borderColor: '#007bff', // Blue color for line\n                    backgroundColor: 'rgba(0, 123, 255, 0.1)', // Light blue background fill for area\n                    borderWidth: 2, // Thinner line for a cleaner look\n                    tension: 0.4,\n                    pointRadius: 4,\n                    pointBackgroundColor: function(context) {\n                        const index = context.dataIndex;\n                        return index === 0 ? '#ff0000' : '#007bff'; // Red for \"Today\", blue for other days\n                    },\n                    fill: true\n                },\n                {\n                    label: 'Temperature Today (°C)',\n                    data: [data[0], ...new Array(data.length - 1).fill(null)], // Only show today's data point\n                    borderColor: '#ff0000', // Red color for today\n                    pointBackgroundColor: '#ff0000',\n                    pointRadius: 5,\n                    borderWidth: 2,\n                    fill: false,\n                    tension: 0.4,\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: false,\n                    min: -10,\n                    max: 40,\n                    grid: {\n                        display: false,\n                        drawBorder: true,\n                        color: \"#333\",\n                        lineWidth: 2,\n                    },\n                    title: {\n                        display: true,\n                        text: 'Temperature (°C)',\n                        font: {\n                            size: 13,\n                            weight: 'bold'\n                        },\n                        color: '#333'\n                    },\n                    ticks: {\n                        font: {\n                            size: 11,\n                            weight: 'bold'\n                        },\n                        color: '#333'\n                    }\n                },\n                x: {\n                    grid: {\n                        display: false,\n                        drawBorder: true,\n                        color: \"#333\",\n                        lineWidth: 2,\n                    },\n                    title: {\n                        display: true,\n                        text: 'Days',\n                        font: {\n                            size: 13,\n                            weight: 'bold'\n                        },\n                        color: '#333',\n                        align: 'center'\n                    },\n                    ticks: {\n                        font: {\n                            size: 11,\n                            weight: 'bold'\n                        },\n                        color: '#333'\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    labels: {\n                        font: { size: 11 },\n                        color: '#333'\n                    },\n                    position: 'top'\n                },\n                tooltip: {\n                    enabled: true,\n                    backgroundColor: '#f5f5f5',\n                    titleColor: '#333',\n                    bodyColor: '#333',\n                    borderColor: '#007bff',\n                    borderWidth: 1\n                }\n            }\n        }\n    });\n\n    // Display the predicted temperature\n    document.getElementById('prediction').innerText = `Predicted Temperature for Next Day (Sunday): ${predictedTemperature.toFixed(2)} °C`;\n    document.getElementById('prediction').style.color = \"#333\";\n    document.getElementById('prediction').style.fontSize = \"1em\";\n\n    // Get weather condition for today\n    const todayTemp = data[0];\n    const weatherCondition = getWeatherCondition(todayTemp);\n\n    // Set weather condition text and icon\n    document.getElementById('weather-description').innerText = `Weather Today: ${weatherCondition.description}`;\n    document.getElementById('weather-icon').src = `path/to/icons/${weatherCondition.icon}`; // Update with the actual path to your icons\n\n    // Adjust canvas size to match widget size\n    const canvas = document.getElementById('weatherChart');\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n};\n",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"weather\",\"dropShadow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "aa29e610-9699-11ef-a3bd-0f61fe9e8422"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}